type Query {
  # Fetch all users
  users: [User!]!

  # Fetch all categories
  categories: [Category!]!

  # Fetch all products
  products: [Product!]!

  # Get a category by its name
  getCategoryByName(name: String!): Category

  # Get products by category ID
  productsByCategory(name: String!): [Product!]!

  # Get a product by ID
  getProductById(id: ID!): Product

  # Get reviews by product ID
  getReviewsByProduct(productId: ID!): [Review!]!

  # Get products by category name (using category name as input)
  getProductsByCategoryName(name: String!): [Product!]!

  # Fetch all products (for filter-based rendering)
  getAllProducts: [Product]
  productsByCategoryId(categoryId: ID!): [Product!]!

  # Fetch products with category filter (by category name and additional filters)
  getProductsByFilter(
    category: String!
    priceRange: [Float]
    gender: String
  ): [Product]
}

type Mutation {
  # User mutations
  signup(
    fullName: String!
    userId: String!
    email: String!
    password: String!
    address: String
  ): AuthResponse!

  login(email: String!, password: String!): AuthResponse!

  # Category mutations
   addCategory(name: String!, categoryImage: String!, categoryID: String!,description:String!): Category
  updateCategory(id: ID!, name: String!, categoryImage: String!, categoryID: String!,description:String!): Category
  deleteCategory(id: ID!): MessageResponse!

  # Product mutations
  addProduct(input: ProductInput!): Product!
  updateProduct(id: ID!, input: ProductInput!): Product!
  deleteProduct(id: ID!): MessageResponse!

  # Review mutations
  addReview(input: ReviewInput!): Review!
}

type User {
  id: ID!
  fullName: String!
  userId: String!
  email: String!
  address: String
}

type Category {
  id: ID!
  name: String!
  createdAt: String!
  categoryImage:String
  categoryID:String!
  description:String!
}

type Product {
  id: ID!
  productId:String!
  name: String!
  price: Float!
  availableCount: Int!
  offer: String
  productCategory: Category
  description: String
 
  mainImage: String
  sliderImages: [String!]
  video: String
  sizes: [String]
  gender: String!
  Brand: String!
  saleStatus: Boolean
  rating:Float
  trendingStatus: Boolean
  createdAt: String!
  reviews: [Review!]
}

input ProductInput {
  name: String!
  price: Float!
  availableCount: Int!
  offer: String
  productCategory: ID # Reference to Category ID
  description: String
 
  mainImage: String
  sliderImages: [String!]
  video: String
  sizes: [String]
  Brand: String!
  gender: String!
  saleStatus: Boolean
  trendingStatus: Boolean
}

type ColorVariant {
  color: String!
  image: String
}

input ColorVariantInput {
  color: String!
  image: String
}

type AuthResponse {
  message: String!
  user: User
}

type MessageResponse {
  message: String!
}

type Review {
  id: ID!
  product: Product! # Add this field
  name: String! # Name of the reviewer
  comment: String!
  rating: Int!
  createdAt: String!
}

input ReviewInput {
  productId: ID!
  name: String! # Name of the reviewer
  comment: String!
  rating: Int!
}
type CartItem {
  id: ID!
  userId: ID!
  productId: ID!
  name: String!
  price: Float!
  offer: Float
  quantity: Int!
  size: String
  image: String
  categoryName: String
}

input CartItemInput {
  productId: ID!
  name: String!
  price: Float!
  offer: Float
  quantity: Int!
  size: String
  image: String
  categoryName: String
}

type Query {
  getCart(userId: ID!): [CartItem!]!
}

type Mutation {
  addToCart(userId: ID!, input: CartItemInput!): CartItem
  updateCartItem(userId: ID!, itemId: ID!, quantity: Int!): CartItem
  removeFromCart(userId: ID!, itemId: ID!): String
}
